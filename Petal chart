import 'package:flutter/material.dart';
import 'dart:math';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Petal chart',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Petal chart'),
        ),
        body: Center(
          child: PetalChart(data: [5, 6, 7, 8, 5], categories: ['A', 'B', 'C', 'D', 'E']),
        ),
      ),
    );
  }
}

class PetalChart extends StatelessWidget {
  final List<double> data;
  final List<String> categories;

  PetalChart({required this.data, required this.categories});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 300,
      height: 300,
      child: CustomPaint(
        painter: PetalChartPainter(data: data, categories: categories),
      ),
    );
  }
}

class PetalChartPainter extends CustomPainter {
  final List<double> data;
  final List<String> categories;

  PetalChartPainter({required this.data, required this.categories});

  @override
  void paint(Canvas canvas, Size size) {
    Paint paintOutline = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.stroke;

    Paint paintFill = Paint()
      ..color = Colors.blue.withOpacity(0.3)
      ..style = PaintingStyle.fill;

    double radius = min(size.width / 2, size.height / 2) - 20;

    // Determine the angle between the petals
    double angle = 2 * pi / data.length;

    // Let's start drawing
    Path path = Path();
    for (int i = 0; i < data.length; i++) {
      double x = (radius * data[i] / 10) * cos(angle * i - pi / 2) + size.width / 2;
      double y = (radius * data[i] / 10) * sin(angle * i - pi / 2) + size.height / 2;
      if (i == 0) {
        path.moveTo(x, y);
      } else {
        path.lineTo(x, y);
      }
    }
    path.close();

    canvas.drawPath(path, paintFill);
    canvas.drawPath(path, paintOutline);

    // Drawing categories
    TextPainter textPainter = TextPainter(
      textDirection: TextDirection.ltr,
    );

    for (int i = 0; i < categories.length; i++) {
      double x = (radius + 20) * cos(angle * i - pi / 2) + size.width / 2;
      double y = (radius + 20) * sin(angle * i - pi / 2) + size.height / 2;

      textPainter.text = TextSpan(
        text: categories[i],
        style: TextStyle(color: Colors.black, fontSize: 14),
      );

      textPainter.layout();
      textPainter.paint(canvas, Offset(x - textPainter.width / 2, y - textPainter.height / 2));
    }
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }
}
